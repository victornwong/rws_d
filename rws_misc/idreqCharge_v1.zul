<?xml version="1.0" encoding="UTF-8"?>
<?page id="reqbckdcharmod"?>
<zk>
<zscript src="../rwglobal/rwglobaldefs.zs" />
<zscript src="../rwglobal/formMaker_v1.zs" />
<zscript src="../rwglobal/rwsqlfuncs.zs" />
<zscript src="../rwglobal/uploadDocu_v1.zs" />
<zscript src="../rwglobal/systemAudit.zs" />
<zscript src="../rwglobal/uploadedWorksheet_v1.zs" />
<zscript>
<![CDATA[
MYTITLE = "Request and Back-charge";
MYVERSION = "v0.1";
MYPANEL = "reqbckchrgpan";
/*
Title : Request and back-charge tracker
Written by : Victor Wong
Dated	: 18/07/2014

Revisions:
*/
import java.util.*;
import java.text.*;
import org.victor.*;
sechand = new SecurityFuncs();

myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

kiboo = new Generals(); sqlhand = new SqlFuncs();
lbhand = new ListboxHandler(); guihand = new GuiFuncs();
luhand = new LookupFuncs(); dmshand = new DMSFuncs();

IDREQ_PREFIX = "IDRQ";

itemselected_obj = null;
glob_sel_request = glob_sel_reqitem = glob_sel_stat = "";
last_list_type = 0;

// TEST: set individual cell-item style - merge with byte-compiled later
Listitem insertListItems_2(Listbox wlistbox, String[] toput, String[] tstyles, String dragdropCode)
{
	if(dragdropCode.equals("")) dragdropCode = "true";

	Listitem litem = new Listitem();
	int i = j = 0;

	for(String tstr : toput)
	{
		Listcell lcell = new Listcell();
		String tstr2 = tstr.trim();
		lcell.setStyle( (tstyles[j].equals("")) ? "font-size:9px" : tstyles[j] ) ;
		if(i == 0)
		{
			lcell.setDraggable(dragdropCode);
			i++;
		}
		lcell.setLabel(tstr2);
		lcell.setParent(litem);
		j++;
	}
	// litem.setDraggable("true");
	litem.setParent(wlistbox);
	return litem;
}

Object getIDreqRec(String iwhat)
{
	sqlstm = "select * from elb_reqdelchrg where origid=" + iwhat;
	return sqlhand.gpSqlFirstRow(sqlstm);
}

void thingsDisabler(boolean iwhat)
{
	Object[] jkl = { i_requester, i_etd, i_brief, i_notes, i_reqitem, i_reqqty, clearitem_b, updatereq_b, saveitem_b, removeitem_b };
	disableUI_obj(jkl,iwhat);
}

Object[] reqitemshds =
{
	new listboxHeaderWidthObj("No.",true,"60px"),
	new listboxHeaderWidthObj("Item",true,""),
	new listboxHeaderWidthObj("Qty",true,"80px"),
};

class itmclierker implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitm = event.getReference();
		try
		{
			itemselected_obj = selitm;
			glob_sel_reqitem = lbhand.getListcellItemLabel(selitm,0);
			i_reqitem.setValue(lbhand.getListcellItemLabel(selitm,1));
			i_reqqty.setValue(lbhand.getListcellItemLabel(selitm,2));
		} catch (Exception e) {}
	}
}
itmreqcliker = new itmclierker();

void showidRequestMeta(String iwhat)
{
	r = getIDreqRec(iwhat);
	if(r == null) { guihand.showMessageBox("ERR: cannot access DB"); return; }

	thingsDisabler( (r.get("rstatus").equals("DRAFT")) ? false : true );

	Object[] jkl = { i_origid, i_requester, i_etd, i_brief, i_notes, i_deliverymode, i_airwaybill };
	String[] fl = { "origid", "requester", "etd", "brief", "notes", "deliverymode", "airwaybill" };

	populateUI_Data(jkl, fl, r);
	fillDocumentsList(documents_holder,IDREQ_PREFIX,iwhat);

	// show 'em request items
	i_reqitem.setValue("");
	i_reqqty.setValue("");
	itemselected_obj = null;
	glob_sel_reqitem = ""; // reset
	Listbox newlb = lbhand.makeVWListbox_Width(rqitems_holder, reqitemshds, "idreqitems_lb", 10);
	newlb.addEventListener("onSelect", itmreqcliker);
	newlb.setMultiple(true);
	newlb.setCheckmark(true);

	if(r.get("req_items") == null) return;
	kri = sqlhand.clobToString(r.get("req_items")).split("~");
	krq = sqlhand.clobToString(r.get("req_qty")).split("~");
	ArrayList kabom = new ArrayList();
	lnc = 1;
	for(i=0; i<kri.length; i++)
	{
		kabom.add(lnc.toString() + ".");
		try { mm = kri[i]; } catch (Exception e) { mm = ""; }
		kabom.add(mm);
		try { qq = krq[i]; } catch (Exception e) { qq = ""; }
		kabom.add(qq);

		lbhand.insertListItems(newlb,kiboo.convertArrayListToStringArray(kabom),"false","");
		kabom.clear();
		lnc++;
	}
	workarea.setVisible(true);
}

// refresh listbox col.0 numbering -- can be used by other mods
void idreqitems_refreshNo(Object ilb)
{
	lnc = 1;
	tms = ilb.getItems().toArray();
	for(i=0; i<tms.length; i++)
	{
		lbhand.setListcellItemLabel(tms[i],0,lnc + ".");
		lnc++;
	}
}

Object[] reqhds =
{
	new listboxHeaderWidthObj("R.Id",true,"50px"),
	new listboxHeaderWidthObj("Dated",true,"70px"),
	new listboxHeaderWidthObj("User",true,"80px"),
	new listboxHeaderWidthObj("Description",true,""),
	new listboxHeaderWidthObj("Stat",true,"80px"),
	new listboxHeaderWidthObj("Requester",true,"80px"),
	new listboxHeaderWidthObj("ETD",true,"70px"),
	//new listboxHeaderWidthObj("CHRG",true,"40px"),
	new listboxHeaderWidthObj("Ch.By",true,"80px"),
	new listboxHeaderWidthObj("Ch.Date",true,"70px"),
};
STAT_IDX = 4;

String[] reqhdsty =
{
	"background:#ff0000",
	"background:#00ff00",
	"background:#0000ff",
	"",
	"",
	"",
	"",
	"",
	"",
};

class reqitmclik implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitm = event.getReference();
		glob_sel_request = lbhand.getListcellItemLabel(selitm,0);
		glob_sel_stat = lbhand.getListcellItemLabel(selitm,STAT_IDX);
		showidRequestMeta(glob_sel_request);
	}
}
idreqcliker = new reqitmclik();

void listIDreq(int itype)
{
	listerpop.close();
	last_list_type = itype;
	sdate = kiboo.getDateFromDatebox(startdate);
	edate = kiboo.getDateFromDatebox(enddate);
	st = kiboo.replaceSingleQuotes(searhtxt_tb.getValue().trim());

	Listbox newlb = lbhand.makeVWListbox_Width(requests_holder, reqhds, "idreqs_lb", 5);

	dtwhstr = "where datecreated between '" + sdate + " 00:00:00' and '" + edate + " 23:59:59' ";

	if(itype == 2) // by search-text
		dtwhstr = "where username like '%" + st + "%' or requester like '%" + st + "%' or brief like '%" + st + "%' ";

	sqlstm = "select origid, datecreated, etd, receivedate, username, requester, brief, chargeticker, chargedate, rstatus from elb_reqdelchrg ";
	sqlstm += dtwhstr + " order by datecreated";

	trs = sqlhand.gpSqlGetRows(sqlstm);
	if(trs.size() == 0) return;
	newlb.setRows(21);
	newlb.setMold("paging");
	newlb.addEventListener("onSelect", idreqcliker);
	ArrayList kabom = new ArrayList();
	String[] fl = { "origid", "datecreated", "username", "brief", "rstatus", "requester", "etd", "chargeticker", "chargedate" };
	tody = kiboo.todayISODateString();
	for(d : trs)
	{
		popuListitems_Data(kabom, fl, d);
		lbhand.insertListItems(newlb,kiboo.convertArrayListToStringArray(kabom),"false","");
		kabom.clear();
	}
}

void doFunc(String itype)
{
	todaydate = kiboo.todayISODateTimeString();
	sqlstm = msgtext = "";
	refresh = disthings = false;
	unm = useraccessobj.username;

	if(itype.equals("newreq_b"))
	{
		sqlstm = "insert into elb_reqdelchrg (datecreated,username,charged,rstatus) values ('" + todaydate + "','" + unm + "',0,'DRAFT');";
		refresh = true;
	}

	if(itype.equals("updatereq_b"))
	{
		if(glob_sel_request.equals("")) return;
		Object[] jkl = { i_requester, i_etd, i_brief, i_notes, i_deliverymode, i_airwaybill };
		dt = getString_fromUI(jkl);
		sqlstm = "update elb_reqdelchrg set requester='" + dt[0] + "', etd='" + dt[1] + "', brief='" + dt[2] + "', notes='" + dt[3] + "'," +
		"deliverymode='" + dt[4] + "', airwaybill='" + dt[5] + "' where origid=" + glob_sel_request;
		refresh = true;
	}

	if(itype.equals("commitreq_b"))
	{
		if(glob_sel_request.equals("")) return;

		if(Messagebox.show("Once committed, no more modification..", "Are you sure?",
			Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) !=  Messagebox.YES) return;

		if(!glob_sel_stat.equals("DRAFT")) { msgtext = "You can only COMMIT new/draft request.."; }
		else
		if(glob_sel_stat.equals("CHARGED")) { msgtext = "Already charged.. what to commit??"; }
		else
		{
			sqlstm = "update elb_reqdelchrg set rstatus='COMMIT' where origid=" + glob_sel_request;
			refresh = disthings = true;
			glob_sel_stat = "COMMIT";
		}
	}

	if(itype.equals("chargereq_b"))
	{
		if(glob_sel_request.equals("")) return;

		if(Messagebox.show("Do make sure you create the charge-back invoice..", "Are you sure?",
			Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) !=  Messagebox.YES) return;

		if(glob_sel_stat.equals("COMMIT"))
		{
			sqlstm = "update elb_reqdelchrg set chargeticker='" + unm + "', chargedate='" + todaydate + "', charged=1, rstatus='CHARGED' where origid=" + glob_sel_request;
			refresh = disthings = true;
			glob_sel_stat = "CHARGED";
		}
		else
		{
			msgtext = "Err: request already charged or not committed..";
		}
	}

	if(itype.equals("cancelreq_b"))
	{
		if(glob_sel_request.equals("")) return;
		if(glob_sel_stat.equals("CHARGED")) { msgtext = "Request already charged, cannot cancel.."; }
		else
		{
			sqlstm = "update elb_reqdelchrg set rstatus='CANCEL' where origid=" + glob_sel_request;
			glob_sel_stat = "CANCEL";
			refresh = disthings = true;
		}
	}

	if(itype.equals("saveitem_b"))
	{
		ki = kiboo.replaceSingleQuotes(i_reqitem.getValue().trim());
		kq = kiboo.replaceSingleQuotes(i_reqqty.getValue().trim());
		if(ki.equals("")) return;
		try { itemselected_obj.setParent(null); } catch (Exception e) {}

		String[] yoyo = { "", ki, kq };
		lbhand.insertListItems(idreqitems_lb,yoyo,"false","");
		idreqitems_refreshNo(idreqitems_lb);

		i_reqitem.setValue(""); // clear after inserting
		i_reqqty.setValue("");
		glob_sel_reqitem = "";

		saveReqItems();
	}

	if(itype.equals("clearitem_b"))
	{
		i_reqitem.setValue("");
		i_reqqty.setValue("");
		itemselected_obj = null;
		glob_sel_reqitem = "";
		idreqitems_lb.clearSelection();
	}

	if(itype.equals("removeitem_b"))
	{
		if(idreqitems_lb.getSelectedCount() == 0) return;
		kk = idreqitems_lb.getSelectedItems().toArray();
		for(i=0; i<kk.length; i++)
		{
			kk[i].setParent(null);
		}
		itemselected_obj = null;
		glob_sel_reqitem = "";
		idreqitems_refreshNo(idreqitems_lb);
		saveReqItems();
	}

	if(itype.equals("expexcel_b"))
	{
		exportExcelFromListbox(idreqs_lb, kasiexport, reqhds, "IDRequests.xls","requests");
	}

	if(itype.equals("expreqlist_b"))
	{
		exportExcelFromListbox(idreqitems_lb, kasiexport, reqitemshds, "IDReqitems.xls","reqitems");
	}

	if(disthings) thingsDisabler(true);
	if(!sqlstm.equals("")) sqlhand.gpSqlExecuter(sqlstm);
	if(refresh) listIDreq(last_list_type);
	if(!msgtext.equals("")) guihand.showMessageBox(msgtext);
}

void saveReqItems()
{
	if(glob_sel_request.equals("")) return;
	if(idreqitems_lb.getItemCount() == 0) return;
	kk = idreqitems_lb.getItems().toArray();
	ri = rq = "";
	for(i=0; i<kk.length; i++)
	{
		ri += kiboo.replaceSingleQuotes( lbhand.getListcellItemLabel(kk[i],1).replaceAll("~"," ") ) + "~";
		rq += kiboo.replaceSingleQuotes( lbhand.getListcellItemLabel(kk[i],2).replaceAll("~"," ") ) + "~";
	}
	try { ri = ri.substring(0,ri.length()-1); } catch (Exception e) {}
	try { rq = rq.substring(0,rq.length()-1); } catch (Exception e) {}

	sqlstm = "update elb_reqdelchrg set req_items='" + ri + "', req_qty='" + rq + "' where origid=" + glob_sel_request;
	sqlhand.gpSqlExecuter(sqlstm);
}

void adminFunc(String itype)
{
	adminpop.close();
	todaydate = kiboo.todayISODateTimeString();
	sqlstm = msgtext = "";
	refresh = false;
	unm = useraccessobj.username;

	if(glob_sel_request.equals("")) return;

	jak = "update elb_reqdelchrg set rstatus='DRAFT' ";

	if(itype.equals("adm_setdraft_b"))
	{
		sqlstm =  jak + "where origid=" + glob_sel_request;
		refresh = true;
		thingsDisabler(false);
	}

	if(itype.equals("adm_clrcharge_b"))
	{
		sqlstm = jak + ", charged=0, chargeticker=null, chargedate=null where origid=" + glob_sel_request;
		refresh = true;
	}

	if(!sqlstm.equals("")) sqlhand.gpSqlExecuter(sqlstm);
	if(refresh) listIDreq(last_list_type);
	if(!msgtext.equals("")) guihand.showMessageBox(msgtext);
}

]]>
</zscript>

<popup id="updatefiledesc_popup"> <!-- update file description popup -->
<div sclass="shadowbox" style="background:#eabb4d" width="400px">
	<groupbox>
		<caption id="updatefiledesc_label" />
		<label value="Description" sclass="k9" />
		<textbox id="update_file_description" multiline="true" height="70px" width="99%" sclass="k9" />
		<separator height="3px" />
		<hbox>
			<button label="Update" sclass="k9mo" onClick="updateFileDescription(documents_holder,IDREQ_PREFIX,glob_sel_request)" />
			<button label="Close" sclass="k9mo" onClick="updatefiledesc_popup.close()" />
		</hbox>
	</groupbox>
</div>
</popup>

<popup id="uploadfile_popup"> <!-- upload a file popup -->
<div sclass="shadowbox" style="background:#eabb4d" width="400px">
	<grid>
		<rows>
			<row>
				<label value="Filename" sclass="k9" />
				<textbox id="fileupl_file_title" width="99%" sclass="k9" />
			</row>
			<row>
				<label value="Description" sclass="k9" />
				<textbox id="fileupl_file_description" multiline="true" height="60px" width="99%" sclass="k9" />
			</row>
		</rows>
	</grid>
	<separator height="3px" />
	<hbox>
		<button label="Select file" onClick="uploadFile(documents_holder,IDREQ_PREFIX,glob_sel_request)" sclass="k9mo" />
		<button label="Close" onClick="uploadfile_popup.close()" sclass="k9mo" />
	</hbox>
</div>
</popup>

<popup id="listerpop">
<div sclass="shadowbox" style="background:#2e3436;">
<grid sclass="GridLayoutNoBorder">
	<rows>
		<row style="background:#2e3436;">
			<hbox>
				<label value="Start" class="k9b" />
				<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />
				<label value="End" class="k9b" />
				<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />
			</hbox>
			<button label="Load by date" sclass="k9mo" onClick="listIDreq(1)" />
		</row>
		<row style="background:#2e3436;">
			<textbox id="searhtxt_tb" sclass="k9" width="99%" />
			<button label="Search" sclass="k9mo" onClick="listIDreq(2)" />
		</row>
	</rows>
</grid>
</div>
</popup>

<popup id="adminpop">
<div sclass="shadowbox" style="background:#f05699;">
	<button id="adm_setdraft_b" label="Set DRAFT" sclass="k9mo" onClick="adminFunc(self.getId())" />
	<button id="adm_clrcharge_b" label="Clear charger" sclass="k9mo" onClick="adminFunc(self.getId())" />
</div>
</popup>

<style src="/real-world.css" />
<style>
.GridLayoutNoBorder tr.z-row td.z-row-inner, tr.z-row .z-cell, div.z-grid
{
border: none; overflow: hidden; zoom: 1;
border-top: none; border-left: none; border-right: none; border-bottom: none;
}
</style>

<div width="1200px">
<panel id="${MYPANEL}" title="${MYTITLE} ${MYVERSION}" border="normal" collapsible="true" closable="true" >
<panelchildren style="background:#bc6f0b">

<div sclass="shadowbox" style="background:#2e3436;">
	<hbox>
		<button label="List/Search" sclass="k9mo" onClick="listerpop.open(self)" />
		<button id="newreq_b" label="New request" sclass="k9mo" onClick="doFunc(self.getId())" />
		<button id="commitreq_b" label="COMMIT" sclass="k9mo" style="color:#c80e24" onClick="doFunc(self.getId())" />
		<button id="cancelreq_b" label="CANCEL" sclass="k9mo" style="color:#565bf0" onClick="doFunc(self.getId())" />
		<button id="chargereq_b" label="CHARGE" sclass="k9mo" style="color:#c80e24" onClick="doFunc(self.getId())" />
		<button id="expexcel_b" label="Export requests" sclass="k9mo" onClick="doFunc(self.getId())" />
		<separator width="10px" />
		<button id="abmin_b" label="ADMIN" sclass="k9mo" style="color:#c80e24" visible="false" onClick="adminpop.open(self)" />
	</hbox>
</div>
<separator height="3px" />

<div id="listboxdiv" sclass="shadowbox" style="background:#2e3436;">
	<div id="requests_holder" />
</div>
<separator height="3px" />

<div id="workarea" sclass="shadowbox" style="background:#2e3436;" visible="false">
	<hbox>
		<vbox>
			<grid width="500px" sclass="GridLayoutNoBorder">
				<rows>
					<row spans="1,3" style="background:#656374">
						<label value="ID.Req" style="color:#ffffff;font-weight:bold" />
						<label id="i_origid" style="color:#ffffff;font-weight:bold" />
					</row>
					<row style="background:#656374">
						<label value="Requester" sclass="k9b" />
						<textbox id="i_requester" sclass="k9" width="99%" />
						<label value="ETD" sclass="k9b" />
						<datebox id="i_etd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />
					</row>
					<row spans="1,3" style="background:#656374">
						<label value="Description" sclass="k9b" />
						<textbox id="i_brief" sclass="k9" width="99%" />
					</row>
					<row spans="1,3" style="background:#656374">
						<label value="Extra notes" sclass="k9b" />
						<textbox id="i_notes" sclass="k9" width="99%" height="70px" multiline="true" />
					</row>
					<row style="background:#656374">
						<label sclass="k9b" value="Delivery" />
						<listbox id="i_deliverymode" sclass="k9" mold="select" />
						<label sclass="k9b" value="Airway#" />
						<textbox id="i_airwaybill" sclass="k9" width="98%" />
					</row>
					<row spans="4" style="background:#656374">
						<hbox>
							<button id="updatereq_b" label="Update" sclass="k9mo" onClick="doFunc(self.getId())" />
						</hbox>
					</row>
				</rows>
			</grid>

			<div style="background:#656374;padding:3px" width="500px">
				<label sclass="subhead1" value="ATTACHMENT / DOCUMENTS" />
				<separator height="3px" />
				<hbox>
					<button id="uploaddoc_btn" label="Upload file" sclass="k9" onClick="showUploadPopup(IDREQ_PREFIX,glob_sel_request)" />
					<button id="viewdoc_btn" label="View file" sclass="k9" onClick="viewFile()" />
					<button id="editdoc_btn" label="Update" sclass="k9" onClick="updatefiledesc_popup.open(self)" />
					<button id="deletedoc_btn" label="Delete" sclass="k9" onClick="deleteFile(documents_holder,IDREQ_PREFIX,glob_sel_request)" />
				</hbox>
				<separator height="3px" />
				<div id="documents_holder" />
			</div>
		</vbox>

		<vbox>
			<div id="rqitems_holder" />

			<div style="background:#656374;padding:5px">
				<hbox>
					<label value="Req.Item" sclass="k9mo" style="color:#ffffff" />
					<textbox id="i_reqitem" sclass="k9" width="350px" height="60px" multiline="true" />
					<label value="Qty" sclass="k9mo" style="color:#ffffff" />
					<textbox id="i_reqqty" width="70px" sclass="k9" />
				</hbox>
				<separator height="5px" bar="true" />
				<hbox>
					<separator width="50px" />
					<button id="saveitem_b" label="Save/Update" sclass="k9mo" onClick="doFunc(self.getId())" />
					<button id="clearitem_b" label="Clear" sclass="k9mo" onClick="doFunc(self.getId())" />
					<button id="removeitem_b" label="Remove" sclass="k9mo" onClick="doFunc(self.getId())" />
					<separator width="10px" />
					<button id="expreqlist_b" label="Export request list" sclass="k9mo" onClick="doFunc(self.getId())" />
				</hbox>
			</div>

		</vbox>

	</hbox>
</div>

<div id="kasiexport" visible="false" />

<zscript>
<![CDATA[

luhand.populateListbox_ByLookup(i_deliverymode, "TRANSPORTER_COURIER", 2);

if(useraccessobj.accesslevel == 9)
{
	abmin_b.setVisible(true);
}

]]>
</zscript>
</panelchildren>
</panel>
</div>
</zk>

