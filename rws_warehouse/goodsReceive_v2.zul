<?xml version="1.0" encoding="UTF-8"?>
<?page id="goodsrecv2mod"?>
<zk>
<zscript src="../rwglobal/rwglobaldefs.zs" />
<zscript src="../rwglobal/formMaker_v1.zs" />
<zscript src="../rwglobal/systemAudit.zs" />
<zscript src="../rwglobal/uploadDocu_v1.zs" />
<zscript src="../rwglobal/fc6_CustomerSelector.zs" />
<zscript src="../rwglobal/jobNotes_funcs.zs" />
<zscript src="../rwglobal/uploadedWorksheet_v1.zs" />
<zscript src="../rwglobal/emailfuncs.zs" />
<zscript>
<![CDATA[
MYTITLE = "Goods Receival";
MYVERSION = "v0.2";
MYPANEL = "goodsrecv2pan";
/*
@Title Goods receiving module
@Authoer Victor Wong
@Since 18/09/2014
@Notes
Total redesign from last year's module - to replace tempGRN, MRN and audit specs update

*/
import java.util.*;
import java.text.*;
import org.victor.*;
sechand = new SecurityFuncs();
myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

kiboo = new Generals(); sqlhand = new SqlFuncs(); lbhand = new ListboxHandler();
guihand = new GuiFuncs(); luhand = new LookupFuncs(); dmshand = new DMSFuncs();
gridhand = new GridHandler(); ngfun = new NGfuncs(); rwsqlfun = new RWMS_sql();

GRN_PREFIX = "GRN";

last_showgrn_type = 1;
glob_sel_grn = "";

String[] scanitems_colws = { "30px", "",          "100px",      "100px",   "40px" };
String[] scanitems_collb = { "",     "Item name", "Asset tag", "Serial", "Qty" };

Object getGRN_rec(String iwhat)
{
	sqlstm = "select * from rw_grn where origid=" + iwhat;
	return sqlhand.gpSqlFirstRow(sqlstm);
}

class tbnulldrop implements org.zkoss.zk.ui.event.EventListener
{	public void onEvent(Event event) throws UiException	{} }
textboxnulldrop = new tbnulldrop();

void searchProductName_FC(String sct)
{
	Object[] pnhds =
	{
		new listboxHeaderWidthObj("Product name",true,""),
	};

	sct = sct.trim();
	if(sct.equals("")) return;
	Listbox newlb = lbhand.makeVWListbox_Width(selprods_holder, pnhds, "prodname_lb", 3);
	sct = sct.replace(" ","%");
	sqlstm = "select top 50 name from mr008 where name like '%" + sct + "%' order by masterid desc";
	r = sqlhand.rws_gpSqlGetRows(sqlstm);
	if(r.size() == 0) return;
	newlb.setMold("paging"); newlb.setRows(20);
	ArrayList kabom = new ArrayList();
	String[] lbi = new String[1];
	for(d : r)
	{
		lbi[0] = d.get("name");
		//ngfun.popuListitems_Data(kabom,flds,d);
		lbhand.insertListItems(newlb,lbi,"false","");
	}
	lbhand.setDoubleClick_ListItems(newlb, prodsearch_dclick);
}

void fillUp_scanned_assets()
{
	kk = main_scan_atgs.getValue().trim();
	if(kk.equals("")) return;
	atgs = kk.split("\n");

	kk2 = main_scan_serials.getValue().trim();
	snm = kk2.split("\n");

	if(atgs.length != snm.length) // imbalance asset-tags and serials
	{
		guihand.showMessageBox("Take note.. imbalance asset-tags and serials scanned.. but still insert");
	}

	for(i=0; i<atgs.length; i++)
	{
		tt = "";
		try { tt = snm[i]; } catch (Exception e) {}
		makeItemRow(grn_rows,"",atgs[i],tt,"1");
	}
}

void makeItemRow(Component irows, String iname, String iatg, String isn, String iqty)
{
	k9 = "font-size:9px";
	nrw = new org.zkoss.zul.Row();
	nrw.setParent(irows);
	ngfun.gpMakeCheckbox(nrw,"","","");
	//ngfun.gpMakeTextbox(nrw,"",iname,k9,"98%",textboxnulldrop); // item-name
	ngfun.gpMakeLabel(nrw,"",iname,k9); // item-name using label
	ngfun.gpMakeTextbox(nrw,"",iatg,k9,"95%",textboxnulldrop); // asset-tag
	ngfun.gpMakeTextbox(nrw,"",isn,k9,"95%",textboxnulldrop); // serial
	ngfun.gpMakeTextbox(nrw,"",iqty,k9,"95%",textboxnulldrop); // qty
}

void itemFunc(String itype)
{
	if(itype.equals("clrticks_b")) // clear 'em checkboxes
	{
		try
		{
			jk = grn_rows.getChildren().toArray();
			for(i=0;i<jk.length;i++)
			{
				ki = jk[i].getChildren().toArray();
				ki[0].setChecked(false);
			}
		} catch (Exception e) {}
	}

	if(itype.equals("additem_b"))
	{
		makeItemRow(grn_rows,"","","","1");
	}

	if(itype.equals("remitem_b")) // remove only ticked
	{
		try
		{
			jk = grn_rows.getChildren().toArray();
			for(i=0;i<jk.length;i++)
			{
				ki = jk[i].getChildren().toArray();
				if(ki[0].isChecked())
				{
					jk[i].setParent(null);
				}
			}
		} catch (Exception e) {}
	}

	if(itype.equals("remall_b")) // remove all
	{
		if (Messagebox.show("Remove ALL items..", "Are you sure?",
			Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) !=  Messagebox.YES) return;

		try
		{
			jk = grn_rows.getChildren().toArray();
			for(i=0;i<jk.length;i++)
			{
				jk[i].setParent(null);
			}
		} catch (Exception e) {}
	}

	if(itype.equals("saveitems_b")) // save scanned-items to grn
	{
		if(glob_sel_grn.equals("")) return;
		saveGRN_items(glob_sel_grn);
	}

}

void saveGRN_items(String igrn)
{
	try
	{
		itms = atgs = srls = qtys = "";

		jk = grn_rows.getChildren().toArray();
		for(i=0;i<jk.length;i++)
		{
			ki = jk[i].getChildren().toArray();

			ii = kiboo.replaceSingleQuotes( ki[1].getValue().trim().replaceAll("~"," ") );
			itms += ((ii.equals("")) ? "NONAME" : ii) + "~";

			ii = kiboo.replaceSingleQuotes( ki[2].getValue().trim().replaceAll("~"," ") );
			atgs += ((ii.equals("")) ? "NOTAG" : ii) + "~";

			ii = kiboo.replaceSingleQuotes( ki[3].getValue().trim().replaceAll("~"," ") );
			srls += ((ii.equals("")) ? "NOSN" : ii) + "~";

			ii = kiboo.replaceSingleQuotes( ki[4].getValue().trim().replaceAll("~"," ") );
			qtys += ((ii.equals("")) ? "NOQTY" : ii) + "~";
		}

/*
		try { itms = itms.substring(0,itms.length()-1); } catch (Exception e) {}
		try { atgs = atgs.substring(0,atgs.length()-1); } catch (Exception e) {}
		try { srls = srls.substring(0,srls.length()-1); } catch (Exception e) {}
		try { qtys = qtys.substring(0,qtys.length()-1); } catch (Exception e) {}
*/

		sqlstm = "update rw_grn set item_names='" + itms + "',asset_tags='" + atgs + "',serials='" + srls + "',qtys='" + qtys + "' where origid=" + igrn;
		sqlhand.gpSqlExecuter(sqlstm);
		guihand.showMessageBox("OK: GRN items saved..");

	} catch (Exception e) { guihand.showMessageBox("ERR: cannot save the GRN items.."); }
}

class prdnsdblick implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selecProduct_pop.close();
		isel = event.getTarget();
		ifnd = lbhand.getListcellItemLabel(isel,0);
		try
		{
			jk = grn_rows.getChildren().toArray();
			for(i=0;i<jk.length;i++)
			{
				ki = jk[i].getChildren().toArray();
				if(ki[0].isChecked())
					ki[1].setValue(ifnd);
			}
		itemFunc("clrticks_b");
		} catch (Exception e) {}
	}
}
prodsearch_dclick = new prdnsdblick();

void showGRN_meta(String iwhat)
{
	r = getGRN_rec(iwhat);
	if(r == null) return;

	String[] fl = { "ourpo", "vendor", "vendor_do", "vendor_inv" };
	Object[] jkl = { g_ourpo, g_vendor, g_vendor_do, g_vendor_inv };
	ngfun.populateUI_Data(jkl,fl,r);

	fillDocumentsList(documents_holder,GRN_PREFIX,iwhat);

	// show 'em grn items
	itms = sqlhand.clobToString(r.get("item_names")).split("~");
	atgs = sqlhand.clobToString(r.get("asset_tags")).split("~");
	srls = sqlhand.clobToString(r.get("serials")).split("~");
	qtys = sqlhand.clobToString(r.get("qtys")).split("~");

	for(i=0;i<itms.length; i++)
	{
		try {
		makeItemRow(grn_rows,itms[i],atgs[i],srls[i],qtys[i]);
		} catch (Exception e) {}
	}


}

Object[] grnhds =
{
	new listboxHeaderWidthObj("GRN",true,"40px"),
	new listboxHeaderWidthObj("PO",true,"50px"),
	new listboxHeaderWidthObj("Stat",true,"60px"),
	new listboxHeaderWidthObj("User",true,"70px"),
	new listboxHeaderWidthObj("Commit",true,"70px"),
	new listboxHeaderWidthObj("Vendor",true,""),
	new listboxHeaderWidthObj("V.DO",true,"60px"),
	new listboxHeaderWidthObj("V.Inv",true,"60px"),
};

class grnclicker implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		isel = event.getReference();
		glob_sel_grn = lbhand.getListcellItemLabel(isel,0);
		showGRN_meta(glob_sel_grn);
	}
}
grnclik = new grnclicker();

void showGRN(int itype)
{
	last_showgrn_type = itype;
	sct = kiboo.replaceSingleQuotes(searhtxt_tb.getValue().trim());
	sdate = kiboo.getDateFromDatebox(startdate);
	edate = kiboo.getDateFromDatebox(enddate);
	jid = kiboo.replaceSingleQuotes(grnid_tb.getValue().trim());

	Listbox newlb = lbhand.makeVWListbox_Width(grnheaders_holder, grnhds, "grnheader_lb", 3);
	sqlstm = "select origid,ourpo,status,vendor,vendor_do,vendor_inv,username,commitdate from rw_grn ";
	switch(itype)
	{
		case 1 :
			sqlstm += "where datecreated between '" + sdate + " 00:00:00' and '" + edate + " 23:59:00' ";
			if(!sct.equals(""))
				sqlstm += " and (vendor like '%" + sct + "%' or vendor_do like '%" + sct + "%' or vendor_inv like '%" + sct + "% or ourpo like '%" + sct + "%') ";
			break;
		case 2 :
			sqlstm += "where origid=" + jid;
			break;
	}
	sqlstm += " order by origid desc";

	rcs = sqlhand.gpSqlGetRows(sqlstm);
	if(rcs.size() == 0) return;
	newlb.setRows(20); newlb.setMold("paging");
	newlb.addEventListener("onSelect", grnclik);
	ArrayList kabom = new ArrayList();
	String[] fl = { "origid","ourpo","status","username","commitdate","vendor","vendor_do","vendor_inv"};
	for(d : rcs)
	{
		ngfun.popuListitems_Data(kabom,fl,d);
		lbhand.insertListItems(newlb,kiboo.convertArrayListToStringArray(kabom),"false","");
		kabom.clear();
	}
}

void grnFunc(String itype)
{
	todaydate =  kiboo.todayISODateTimeString();
	sqlstm = msgtext = "";
	unm = useraccessobj.username;

	if(itype.equals("newgrn_b"))
	{
		sqlstm = "insert into rw_grn (username,datecreated,ourpo,status) values " +
		"('" + unm + "','" + todaydate + "','','DRAFT');";
	}

	if(itype.equals("updgrn_b"))
	{
		if(glob_sel_grn.equals("")) return;
		Object[] jkl = { g_ourpo, g_vendor, g_vendor_do, g_vendor_inv };
		dt = ngfun.getString_fromUI(jkl);
		sqlstm = "update rw_grn set ourpo='" + dt[0] + "', vendor='" + dt[1] + "'," +
		"vendor_do='" + dt[2] + "', vendor_inv='" + dt[3] + "' where origid=" + glob_sel_grn;
	}

	if(itype.equals("remgrn_b"))
	{

	}

	if(itype.equals("commgrn_b"))
	{

	}

	if(!sqlstm.equals(""))
	{
		sqlhand.gpSqlExecuter(sqlstm);
		showGRN(last_showgrn_type);
	}
	if(!msgtext.equals("")) guihand.showMessageBox(msgtext);
}

]]>
</zscript>

<!-- update file description popup -->
<popup id="updatefiledesc_popup">
	<groupbox width="400px">
		<caption id="updatefiledesc_label" />
		<label value="Description" class="k9" />
		<textbox id="update_file_description" multiline="true" height="70px" width="99%" class="k9" />
		<separator height="3px" />
		<hbox>
			<button label="Update" class="k9" onClick="updateFileDescription(documents_holder,GRN_PREFIX,glob_sel_grn)" />
			<button label="Close" class="k9" onClick="updatefiledesc_popup.close()" />
		</hbox>
	</groupbox>
</popup>

<!-- upload a file popup -->
<popup id="uploadfile_popup">
	<groupbox>
	<caption label="Upload a file" />
		<grid>
			<rows>
				<row>
					<label value="Filename" class="k9" />
					<textbox id="fileupl_file_title" width="200px" class="k9" />
				</row>
				<row>
					<label value="Description" class="k9" />
					<textbox id="fileupl_file_description" multiline="true" height="60px" width="200px" class="k9" />
				</row>
			</rows>
		</grid>
	</groupbox>
	<separator height="3px" />
	<hbox>
		<button label="Select file" onClick="uploadFile(documents_holder,GRN_PREFIX,glob_sel_grn)" class="k9" />
		<button label="Close" onClick="uploadfile_popup.close()"  class="k9" />
	</hbox>
</popup>

<popup id="selecProduct_pop">
	<div sclass="shadowbox" style="background:#818D16" width="400px">
		<hbox>
			<textbox id="selprod_tb" width="200px" sclass="k9" />
			<button label="Search" sclass="k9mo" onClick="searchProductName_FC(selprod_tb.getValue())" />
		</hbox>
		<label value="(Max 50 items per search)" style="font-size:8px" />
		<separator height="3px" />
		<div id="selprods_holder" />
	</div>
</popup>

<style src="/real-world.css" />
<style>
.GridLayoutNoBorder tr.z-row td.z-row-inner, tr.z-row .z-cell, div.z-grid
{
border: none; overflow: hidden; zoom: 1;
border-top: none; border-left: none; border-right: none; border-bottom: none;
} 
</style>

<div width="1200px">
<panel id="${MYPANEL}" title="${MYTITLE} ${MYVERSION}" border="normal" collapsible="true" closable="true">
<panelchildren style="background:#322B29">

	<div sclass="shadowbox" style="background:#36427F">
		<hbox style="padding:3px">
			<label value="Start date" sclass="k9b" />
			<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />
			<label value="End date" sclass="k9b" />
			<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />

			<textbox id="searhtxt_tb" width="150px" sclass="k9" />
			<button label="Load/Find" sclass="k9mo" onClick="showGRN(1)" />

			<textbox id="grnid_tb" width="50px" sclass="k9" />
			<button label="by GRN" sclass="k9mo" onClick="showGRN(2)" />

			<button id="admin_b" label="ADMIN" sclass="k9mo" style="color:#D60D0D" visible="false" />
		</hbox>
	</div>

	<hbox>
		<div sclass="shadowbox" style="background:#36427F" width="650px">
			<hbox>
				<button id="newgrn_b" label="New GRN" sclass="k9mo" onClick="grnFunc(self.getId())" />
				<button id="remgrn_b" label="Remove" sclass="k9mo" onClick="grnFunc(self.getId())" />
				<button id="commgrn_b" label="Commit" sclass="k9mo" onClick="grnFunc(self.getId())" />
			</hbox>
			<separator height="3px" />
			<div id="grnheaders_holder" />
		</div>

		<div id="grnmeta_holder" sclass="shadowbox" style="background:#36427F">
			<hbox>
				<button id="updgrn_b" label="Update" sclass="k9mo" onClick="grnFunc(self.getId())" />
			</hbox>
			<separator height="3px" />
			<grid>
				<rows>
					<row spans="1,3">
						<label value="Our PO" sclass="k9" />
						<textbox id="g_ourpo" sclass="k9" />
					</row>
					<row spans="1,3">
						<label value="Vendor" sclass="k9" />
						<textbox id="g_vendor" sclass="k9" width="99%" />
					</row>
					<row>
						<label value="Vendor Invoice" sclass="k9" />
						<textbox id="g_vendor_inv" sclass="k9" width="99%" />
						<label value="Vendor DO" sclass="k9" />
						<textbox id="g_vendor_do" sclass="k9" width="99%" />
					</row>
				</rows>
			</grid>
			<separator height="3px" />

			<div sclass="shadowbox" style="background:#555753" id="docholder" width="${BOXWIDTH}">
				<label sclass="subhead1">ATTACHMENT / DOCUMENTS</label>
				<separator height="3px" />
				<hbox>
					<button id="uploaddoc_btn" label="Upload file" class="k9" onClick="showUploadPopup(GRN_PREFIX,glob_sel_grn)" />
					<button id="viewdoc_btn" label="View file" class="k9" onClick="viewFile()" />
					<button id="editdoc_btn" label="Update" class="k9" onClick="updatefiledesc_popup.open(self)" />
					<button id="deletedoc_btn" label="Delete" class="k9" onClick="deleteFile(documents_holder,GRN_PREFIX,glob_sel_grn)" />
				</hbox>
				<separator height="3px" />
				<div id="documents_holder" />
			</div>
		</div>

	</hbox>

	<vbox>
		<div sclass="shadowbox" style="background:#36427F">
			<grid sclass="GridLayoutNoBorder">
				<rows>
					<row style="background:#36427F">
						<label value="Scan asset-tags" style="color:#ffffff;font-weight:bold" />
						<label value="Scan serial-numbers" style="color:#ffffff;font-weight:bold" />
					</row>
					<row style="background:#36427F">
						<textbox id="main_scan_atgs" width="99%" height="200px" multiline="true" />
						<textbox id="main_scan_serials" width="99%" height="200px" multiline="true" />
					</row>
				</rows>
			</grid>
			<hbox>
				<button label="Insert" sclass="k9mo" onClick="fillUp_scanned_assets()" />
				<button label="Clear assets" sclass="k9mo" onClick='main_scan_atgs.setValue("")' />
				<button label="Clear serials" sclass="k9mo" onClick='main_scan_serials.setValue("")' />
			</hbox>
		</div>

		<div sclass="shadowbox" style="background:#36427F">
			<hbox>
				<button id="clrticks_b" label="Ticks" sclass="k9mo" onClick="itemFunc(self.getId())" />
				<button id="additem_b" label="Add item" sclass="k9mo" onClick="itemFunc(self.getId())" />
				<button id="remitem_b" label="Remove" sclass="k9mo" onClick="itemFunc(self.getId())" />
				<button id="remall_b" label="Remove ALL" sclass="k9mo" onClick="itemFunc(self.getId())" />
				<button id="selprod_b" label="Select product name" sclass="k9mo" onClick="selecProduct_pop.open(self)" />
				<button id="saveitems_b" label="SAVE" sclass="k9mo" onClick="itemFunc(self.getId())" />
			</hbox>
		</div>

		<div id="scanitems_holder" width="500px" />
	</vbox>

<zscript>
<![CDATA[

ngfun.checkMakeGrid(scanitems_colws, scanitems_collb, scanitems_holder, "grn_grid", "grn_rows", "", "", false);

if(useraccessobj.accesslevel == 9)
{
	admin_b.setVisible(true);
}


]]>
</zscript>
</panelchildren>
</panel>
</div>
</zk>

