<?xml version="1.0" encoding="UTF-8"?>
<?page id="billevo2pg"?>
<zk>
<zscript src="../rwglobal/rwglobaldefs.zs" />
<zscript src="../rwglobal/rwsqlfuncs.zs" />
<zscript src="../rwglobal/formMaker_v1.zs" />
<zscript src="../rwglobal/systemAudit.zs" />
<zscript src="../rwglobal/uploadDocu_v1.zs" />
<zscript src="../rwglobal/fc6_CustomerSelector.zs" />
<zscript src="../rwglobal/jobNotes_funcs.zs" />
<zscript src="../rwglobal/uploadedWorksheet_v1.zs" />
<zscript src="../rwglobal/emailfuncs.zs" />
<zscript>
<![CDATA[
MYTITLE = "BillingEvo2 (Rental buku management)";
MYVERSION = "v0.1";
MYPANEL = "billnevo2";
/*
@Title Billing Evolution 2 - rental book management
@Author Victor Wong
@Since 14/05/2015
@Notes
A new design to keep track of each rental installment - rental book thing
*/
import java.util.*;
import java.text.*;
import org.victor.*;
sechand = new SecurityFuncs();
myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);
kiboo = new Generals(); sqlhand = new SqlFuncs(); lbhand = new ListboxHandler();
guihand = new GuiFuncs(); luhand = new LookupFuncs(); dmshand = new DMSFuncs();
gridhand = new GridHandler(); ngfun = new NGfuncs(); rwsqlfun = new RWMS_sql();

SLOTS_GRID_ID = "theslots";
SLOTS_GRID_ROWS_ID = "slot_rows";

glob_sel_lcorigid = "";

// iholder: DIV id, islotid: slots-grid id
void checkCreateSlotsGrid(Div iholder, String islotid)
{
	String[] colhed = { "","No.","NextBill","Inv.No","Inv.Date" };
	String[] colwds = { "20px", "30px", "80px", "100px", "80px" };
	ngfun.checkMakeGrid(colwds, colhed, iholder, islotid, SLOTS_GRID_ROWS_ID, "", "350px", true);
}

Object[] lccols_headers =
{
	new listboxHeaderWidthObj("origid",false,""),
	new listboxHeaderWidthObj("LC",true,"70px"),
	new listboxHeaderWidthObj("Customer",true,""),
	new listboxHeaderWidthObj("User",true,"60px"),
	new listboxHeaderWidthObj("EndDate",true,"70px"),
	new listboxHeaderWidthObj("OrderType",true,""),
};

class lcrentlOnC implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		isel = event.getReference();
		glob_sel_lcorigid = lbhand.getListcellItemLabel(isel,0);

		checkCreateSlotsGrid(slotsholder,SLOTS_GRID_ID);
	}
}
lcrentalclk = new lcrentlOnC();

// Billing punya show LC. Only list LC with certain status
void billingShowLC(int itype)
{
	st = kiboo.replaceSingleQuotes(searhtxt_tb.getValue().trim());
	sdate = kiboo.getDateFromDatebox(startdate);
	edate = kiboo.getDateFromDatebox(enddate);

	Listbox newlb = lbhand.makeVWListbox_Width(lcholder, lccols_headers, "lc_lb", 20);

	sqlstm = "select origid,lc_id,username,customer_name,lenddate,order_type from rw_lc_records " +
	"where lenddate <= getdate() and lstatus in ('active','inertia') order by lenddate;";

	screcs = sqlhand.gpSqlGetRows(sqlstm);
	if(screcs.size() == 0) return;
	newlb.setRows(21); newlb.setMold("paging");
	newlb.addEventListener("onSelect", lcrentalclk );
	ArrayList kabom = new ArrayList();
	String[] fl = { "origid","lc_id","customer_name","username","lenddate","order_type" };

	for(d : screcs)
	{
		ngfun.popuListitems_Data(kabom,fl,d);
		ki = lbhand.insertListItems(newlb,kiboo.convertArrayListToStringArray(kabom),"false","");
		kabom.clear();
	}
}

void slotsFunc(String itype)
{
	todaydate =  kiboo.todayISODateTimeString();
	sqlstm = msgtext = "";
	refresh = false;

	if(itype.equals("ins1slot_b")) // insert 1 slot
	{
		insert_BlankSlot(1);
		refreshSlot_Num();
	}

	if(itype.equals("ins12slot_b")) // insert 12 slots
	{
		insert_BlankSlot(12);
		refreshSlot_Num();
	}

	if(itype.equals("remslot_b")) // remove ticked slots
	{
		iterateSlots(slot_rows,1);
		refreshSlot_Num();
	}

	if(itype.equals("untick_b")) // untick checkboxes
	{
		iterateSlots(slot_rows,2);
	}
}

// Abit hardcoded to iterate over grid-rows and perform some func
// irows: the grid ROWS id, itype: what func
void iterateSlots(Object irows, int itype)
{
	cds = irows.getChildren().toArray();
	for(i=0; i<cds.length; i++)
	{
		cx = cds[i].getChildren().toArray();

		switch(itype)
		{
			case 1: // remove ticked slots
				if(cx[0].isChecked()) cds[i].setParent(null); // TODO need to check if there's already invoice, not allow to remove
				break;

			case 2: // untick checkboxes
				cx[0].setChecked(false);
				break;
		}
	}
}

class slotdclik implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		seli = event.getTarget();
		alert(seli);
	}
}
slotdclicker = new slotdclik();

// icount: how many to insert
void insert_BlankSlot(int icount)
{
	k9 = "font-size:9px";
	for(i=0; i<icount; i++)
	{
		nrw = new org.zkoss.zul.Row();
		nrw.setParent(slot_rows); // HARDCODED: see how to refer to SLOTS_GRID_ROWS_ID instead for future expansion
		ngfun.gpMakeCheckbox(nrw,"","","");
		ngfun.gpMakeLabel(nrw,"","NNN",k9);

		ngfun.gpMakeLabel(nrw,"","0000-00-00",k9);
		ngfun.gpMakeLabel(nrw,"","ddddd",k9);
		ngfun.gpMakeLabel(nrw,"","0000-00-00",k9);
		//doi = new Datebox(); doi.setStyle("font-size:9px"); doi.setFormat("yyyy-MM-dd"); doi.setParent(nrw);

		nrw.addEventListener("onDoubleClick", slotdclicker);
	}
}

// Refresh the numbering column of grid
void refreshSlot_Num()
{
	cds = null;
	try { cds = slot_rows.getChildren().toArray(); } catch (Exception e) { return; }
	lncount = 1;
	for(i=0; i<cds.length; i++)
	{
		cx = cds[i].getChildren().toArray();
		cx[1].setValue(lncount.toString() + ".");
		lncount++;
	}
}

]]>
</zscript>

<style src="/real-world.css" />
<style>
	.GridLayoutNoBorder tr.z-row td.z-row-inner, tr.z-row .z-cell, div.z-grid
	{
	border: none; overflow: hidden; zoom: 1;
	border-top: none; border-left: none; border-right: none; border-bottom: none;
	}
</style>

<div width="1200px">
<panel id="${MYPANEL}" title="${MYTITLE} ${MYVERSION}" border="normal" collapsible="true" closable="true" >
<panelchildren style="background:#0C203E">

	<div sclass="shadowbox" style="background:#849324" id="maintop_div" >
		<label value="LC-END-DATE Start" sclass="k9b" visible="false" />
		<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" visible="false" />
		<label value="End" sclass="k9b" visible="false" />
		<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" visible="false" />
		<textbox id="searhtxt_tb" width="180px" sclass="k9" />
		<button label="Load/Find" sclass="k9mo" onClick="billingShowLC(1)" />
	</div>
	<separator height="3px" />
	<div id="lcholder" />
	<separator height="3px" />

	<div sclass="shadowbox" style="background:#86B1C1">
		<hbox>
			<button id="untick_b" label="Untick" sclass="k9mo" onClick="slotsFunc(self.getId())" />
			<button id="ins1slot_b" label="Insert slot" sclass="k9mo" onClick="slotsFunc(self.getId())" />
			<button id="ins12slot_b" label="Insert 12 slots" sclass="k9mo" onClick="slotsFunc(self.getId())" />
			<button id="remslot_b" label="Remove" sclass="k9mo" onClick="slotsFunc(self.getId())" />
			<separator width="10px" />
			<button label="Upload billing" sclass="k9mo" />
		</hbox>
		<separator height="5px" bar="true" />

		<div id="slotsholder" />

	</div>

<zscript>
<![CDATA[

]]>
</zscript>
</panelchildren>
</panel>
</div>
</zk>

